<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlitzkriegSoftware.MsTest</name>
    </assembly>
    <members>
        <member name="T:BlitzkriegSoftware.MsTest.ArgumentTypeMismatchException">
            <summary>
            Exception: Passed types do not agree
            </summary>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.ArgumentTypeMismatchException.#ctor">
            <summary>
            CTOR
            </summary>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.ArgumentTypeMismatchException.#ctor(System.String)">
            <summary>
            CTOR
            </summary>
            <param name="message">(sic)</param>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.ArgumentTypeMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            CTOR
            </summary>
            <param name="message">(sic)</param>
            <param name="innerException">(sic)</param>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.ArgumentTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            (serialization)
            </summary>
            <param name="info">(sic)</param>
            <param name="context">(sic)</param>
        </member>
        <member name="T:BlitzkriegSoftware.MsTest.MsTestLogger`1">
            <summary>
            ILogger for MsTest
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.MsTestLogger`1.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)">
            <summary>
            CTOR
            </summary>
            <param name="output">TestContext</param>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.MsTestLogger`1.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            Log (Contract method)
            </summary>
            <typeparam name="TState">TState</typeparam>
            <param name="logLevel">LogLevel</param>
            <param name="eventId">EventId</param>
            <param name="state">TState</param>
            <param name="exception">Exception</param>
            <param name="formatter">Function Formatter</param>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.MsTestLogger`1.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            IsEnabled
            </summary>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.MsTestLogger`1.BeginScope``1(``0)">
            <summary>
            Begin Scope
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="state">TState</param>
            <returns>this</returns>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.MsTestLogger`1.Dispose">
            <summary>
            Dispose (DTOR)
            </summary>
        </member>
        <member name="T:BlitzkriegSoftware.MsTest.TestJsonSerializationHelper">
            <summary>
            An Extension to compare if a class serializes to JSON and back correctly.
            <para>Two potential Strategies</para>
            </summary>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.TestJsonSerializationHelper.AssertJsonSerialization``1(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext,``0)">
            <summary>
            Tests that a model serializes correctly, will fail the internal <c>Assert</c> if not.
            <para>Does not always work with some classes with odd properties</para>
            <para>This is our home grown method</para>
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="thing1">Instance of T to test</param>
            <param name="testContext">TestContext</param>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.TestJsonSerializationHelper.FindDiff(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken,System.Collections.Generic.List{System.String}@)">
            <summary>
            Tries a different approach, using JTokens
            <para>
            Convert JSON to JToken
            <code>
            JToken token = JToken.Parse(jsonString);
            </code>
            </para>
            <para>From a suggestion from <![CDATA[https://stackoverflow.com/questions/52645603/how-to-compare-two-json-objects-using-c-sharp]]></para>
            </summary>
            <param name="actual">Actual</param>
            <param name="expected">Expected</param>
            <param name="changedItems">list of diffs for a log</param>
            <returns>JObject containing diff</returns>
            <exception cref="T:BlitzkriegSoftware.MsTest.ArgumentTypeMismatchException">Passed types do not agree</exception>
        </member>
        <member name="T:BlitzkriegSoftware.MsTest.TestOutputHelper">
            <summary>
            Helper to output as JSON
            </summary>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.TestOutputHelper.AsJson(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext,System.Object,System.String)">
            <summary>
            Emit an object as json
            </summary>
            <param name="output">ITestOutputHelper</param>
            <param name="o">object</param>
            <param name="title">(optional) Title</param>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.TestOutputHelper.AsJsonString``1(``0)">
            <summary>
            Return a Json String from a T
            </summary>
            <typeparam name="T">(type)</typeparam>
            <param name="entity">(this to json)</param>
            <returns>Json String or null</returns>
        </member>
        <member name="T:BlitzkriegSoftware.MsTest.TxTimer">
            <summary>
            Handy Helper to Time Executions of Tests
            <example>
            Here is a typical snippet, because the class supports <see cref="T:System.IDisposable"/> the time can be started at the top 
            of the using statement and automatically stopped in the dispose
            <code>
            // Stop Watch Created and Started
            using (FcTimer myTimer = new FcTimer( ... )) {
                // Do something you want timed
                var elapsed = myTimer.ElapsedMilliseconds;
                // Stop Watch stopped in DTOR
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.TxTimer.#ctor">
            <summary>
            CTOR
            <para>Also starts timer</para>
            </summary>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.TxTimer.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)">
            <summary>
            CTOR with optional injection of TestContext
            </summary>
            <param name="testContext">(sic)</param>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.TxTimer.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext,System.String)">
            <summary>
            CTOR
            </summary>
            <param name="testContext">(sic)</param>
            <param name="title">(sic)</param>
        </member>
        <member name="P:BlitzkriegSoftware.MsTest.TxTimer.StopWatch">
            <summary>
            Stop watch instance
            <para>Do not access directly if possible</para>
            </summary>
        </member>
        <member name="P:BlitzkriegSoftware.MsTest.TxTimer.IsRunning">
            <summary>
            Determine if the stop watch is running
            </summary>
        </member>
        <member name="P:BlitzkriegSoftware.MsTest.TxTimer.ElapsedMilliseconds">
            <summary>
            Returns milliseconds from a running timer
            </summary>
        </member>
        <member name="P:BlitzkriegSoftware.MsTest.TxTimer.ElaspsedTicks">
            <summary>
            Returns the elapsed ticks from a running timer
            </summary>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.TxTimer.DisplayElaspsedTime(System.Int64)">
            <summary>
            Display milliseconds in a nice string
            </summary>
            <param name="milliseconds">milliseconds</param>
            <returns>nice string</returns>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.TxTimer.DisplayElaspsedTime(System.TimeSpan)">
            <summary>
            Display TimeSpan in a nice string
            </summary>
            <param name="ts">TimeSpan</param>
            <returns>nice string</returns>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.TxTimer.Start">
            <summary>
            Called by constructor, creates a new stop watch and starts it
            Try not to call explictly
            </summary>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.TxTimer.Stop">
            <summary>
            Called by destructor, stops stopwatch writes log (optionally)
            </summary>
            <returns>Milliseconds Elapsed</returns>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.TxTimer.Reset">
            <summary>
            Reset but do not destroy the timer
            </summary>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.TxTimer.Cancel">
            <summary>
            Stop and destroy the timer
            </summary>
        </member>
        <member name="M:BlitzkriegSoftware.MsTest.TxTimer.Dispose">
            <summary>
            Generic destructor
            </summary>
        </member>
    </members>
</doc>
